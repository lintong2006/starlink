{"version":3,"sources":["assets/images/starlink_logo.svg","components/Header.js","constants.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","index.js"],"names":["Header","className","src","starlinkLogo","alt","Component","SAT_API_KEY","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatSetting","Form","create","name","SatelliteList","state","selected","showMap","onShowMap","onChange","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","satInfo","isLoad","satList","above","size","disabled","length","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","prevProps","prevState","snapshot","height","WorldMap1","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","satData","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","error","WorldMap","Footer","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.83ea55ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/starlink_logo.54bfef76.svg\";","import React, {Component} from 'react';\nimport starlinkLogo  from '../assets/images/starlink_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n\n","export const SAT_API_KEY = \"PZ58DK-CPEESM-23TKPU-4NPD\";\nexport const STARLINK_CATEGORY = \"52\";\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";\n","import React, { Component } from \"react\";\nimport { Form, Button, InputNumber } from \"antd\";\n\nclass SatSettingForm extends Component {\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 11 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 13 }\n      }\n    };\n    return (\n      <Form\n        {...formItemLayout}\n        className=\"sat-setting\"\n        onSubmit={this.showSatellite}\n      >\n        <Form.Item label=\"Longitude(degrees)\">\n          {getFieldDecorator(\"longitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Longitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              min={-180}\n              max={180}\n              style={{ width: \"100%\" }}\n              placeholder=\"Please input Longitude\"\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Latitude(degrees)\">\n          {getFieldDecorator(\"latitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Latitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Latitude\"\n              min={-90}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Elevation(meters)\">\n          {getFieldDecorator(\"elevation\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Elevation\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Elevation\"\n              min={-413}\n              max={8850}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Altitude(degrees)\">\n          {getFieldDecorator(\"altitude\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Altitude\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Altitude\"\n              min={0}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n\n        <Form.Item label=\"Duration(secs)\">\n          {getFieldDecorator(\"duration\", {\n            rules: [\n              {\n                required: true,\n                message: \"Please input your Duration\"\n              }\n            ]\n          })(\n            <InputNumber\n              placeholder=\"Please input Duration\"\n              min={0}\n              max={90}\n              style={{ width: \"100%\" }}\n            />\n          )}\n        </Form.Item>\n        <Form.Item className=\"show-nearby\">\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{ textAlign: \"center\" }}\n          >\n            Find Nearby Satellite\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n\n  showSatellite = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        // console.log('Received values of form: ', values);\n        this.props.onShow(values);\n      }\n    });\n  };\n}\n\nconst SatSetting = Form.create({ name: \"satellite-setting\" })(SatSettingForm);\n\nexport default SatSetting;\n\n\n","export default __webpack_public_path__ + \"static/media/satellite.82c5950a.svg\";","import React, {Component} from 'react';\nimport { Button, Spin, List, Avatar, Checkbox } from 'antd';\n\nimport satellite from '../assets/images/satellite.svg';\n\nclass SatelliteList extends Component {\n    state = {\n        selected: []\n    }\n\n    render() {\n        const { selected } = this.state;\n        const {satInfo, isLoad} = this.props;\n        const satList = satInfo ? satInfo.above : [];\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\" size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.showMap} >\n                    Track on the map\n                </Button>\n                <hr/>\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        <List className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                              dataSource={satList}\n                              renderItem={ item => (\n                                  <List.Item actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\n                                      <List.Item.Meta\n                                          avatar={<Avatar src={satellite} size=\"large\" alt=\"satellite\"/>}\n                                          title={<p>{item.satname}</p>}\n                                          description={`Launch Date: ${item.launchDate}`}\n                                      />\n                                  </List.Item>\n                              )}\n                        />\n                }\n            </div>\n        );\n    }\n\n    showMap = () => {\n        const { selected } = this.state;\n        this.props.onShowMap(selected);\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({\n            selected: list\n        })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid );\n\n        if(status && !found) {\n            list.push(item);\n        }\n\n        if(!status && found) {\n            list = list.filter( entry => entry.satid !== item.satid);\n        }\n\n        return list;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satInfo !== this.props.satInfo) {\n            this.setState({selected: []})\n        }\n    }\n}\n\nexport default SatelliteList;\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap1;\n\n\n\n\n\n","import React, {Component} from 'react';\nimport { Row, Col } from 'antd';\nimport axios from 'axios';\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nclass Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        }\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            <Row className='main'>\n                <Col span={8} className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList isLoad={isLoadingList}\n                                   satInfo={satInfo}\n                                   onShowMap={this.showMap} />\n                </Col>\n                <Col span={16} className=\"right-side\">\n                    <WorldMap satData={satList} observerData={setting} />\n                </Col>\n            </Row>\n        );\n    }\n\n    showMap = (selected) => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }))\n    }\n\n    showNearbySatellite = (setting) => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        })\n        this.fetchSatellite(setting);\n    }\n\n    fetchSatellite= (setting) => {\n        const {latitude, longitude, elevation, altitude} = setting;\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n   this.setState({\n       isLoadingList: true\n   });\n\n   axios.get(url)\n       .then(response => {\n           console.log(response.data)\n           this.setState({\n               satInfo: response.data,\n               isLoadingList: false\n           })\n       })\n       .catch(error => {\n           console.log('err in fetch satellite -> ', error);\n       })\n    }\n}\nexport default Main;\n\n\n\n\n\n\n\n\n\n\n","\nimport React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Lin Tong\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n//import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//reportWebVitals();"],"sourceRoot":""}